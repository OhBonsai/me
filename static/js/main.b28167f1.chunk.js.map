{"version":3,"sources":["effects/Chaos.js","components/Boxes.js","App.js","index.js"],"names":["Effects","composer","useRef","useThree","scene","gl","size","camera","aspect","useMemo","THREE","width","height","useEffect","current","setSize","useFrame","render","ref","args","attachArray","kernelRadius","maxDistance","FXAAShader","renderToScreen","extend","EffectComposer","ShaderPass","RenderPass","SSAOPass","UnrealBloomPass","tempObject","tempColor","colors","Array","fill","map","niceColors","Math","floor","random","Boxes","useState","hovered","set","colorArray","Float32Array","from","flatMap","_","i","toArray","meshRef","prevRef","state","time","clock","getElapsedTime","rotation","x","sin","y","z","id","position","Current","geometry","attributes","color","needsUpdate","scale","updateMatrix","setMatrixAt","matrix","instanceMatrix","onPointerMove","e","instanceId","onPointerOut","undefined","attachObject","vertexColors","App","flat","antialias","alpha","near","far","onCreated","setClearColor","intensity","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b28167f1.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport React, { useRef, useEffect, useMemo } from 'react'\r\nimport { extend, useThree, useFrame } from '@react-three/fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass'\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\n\r\nextend({ EffectComposer, ShaderPass, RenderPass, SSAOPass, UnrealBloomPass })\r\n\r\nexport default function Effects() {\r\n  const composer = useRef()\r\n  const { scene, gl, size, camera } = useThree()\r\n  const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [size])\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => composer.current.render(), 2)\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <sSAOPass attachArray=\"passes\" args={[scene, camera]} kernelRadius={0.4} maxDistance={0.03} />\r\n      <unrealBloomPass attachArray=\"passes\" args={[aspect, 1.25, 1, 0.991]} />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\r\n        renderToScreen\r\n      />\r\n    </effectComposer>\r\n  )\r\n}\r\n","import * as THREE from 'three'\r\nimport React, { useRef, useMemo, useState, useEffect } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport niceColors from 'nice-color-palettes'\r\n\r\nconst tempObject = new THREE.Object3D()\r\nconst tempColor = new THREE.Color()\r\nconst colors = new Array(1000).fill().map(() => niceColors[17][Math.floor(Math.random() * 5)])\r\n\r\nexport default function Boxes() {\r\n  const [hovered, set] = useState()\r\n  const colorArray = useMemo(() => Float32Array.from(new Array(1000).fill().flatMap((_, i) => tempColor.set(colors[i]).toArray())), [])\r\n  const meshRef = useRef()\r\n  const prevRef = useRef()\r\n  useEffect(() => void (prevRef.current = hovered), [hovered])\r\n  useFrame((state) => {\r\n    const time = state.clock.getElapsedTime()\r\n    meshRef.current.rotation.x = Math.sin(time / 4)\r\n    meshRef.current.rotation.y = Math.sin(time / 2)\r\n    let i = 0\r\n    for (let x = 0; x < 10; x++)\r\n      for (let y = 0; y < 10; y++)\r\n        for (let z = 0; z < 10; z++) {\r\n          const id = i++\r\n          tempObject.position.set(5 - x, 5 - y, 5 - z)\r\n          tempObject.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(z / 4 + time)\r\n          tempObject.rotation.z = tempObject.rotation.y * 2\r\n          if (hovered !== prevRef.Current) {\r\n            tempColor.set(id === hovered ? 'white' : colors[id]).toArray(colorArray, id * 3)\r\n            meshRef.current.geometry.attributes.color.needsUpdate = true\r\n          }\r\n          const scale = id === hovered ? 2 : 1\r\n          tempObject.scale.set(scale, scale, scale)\r\n          tempObject.updateMatrix()\r\n          meshRef.current.setMatrixAt(id, tempObject.matrix)\r\n        }\r\n    meshRef.current.instanceMatrix.needsUpdate = true\r\n  })\r\n  return (\r\n    <instancedMesh ref={meshRef} args={[null, null, 1000]} onPointerMove={(e) => set(e.instanceId)} onPointerOut={(e) => set(undefined)}>\r\n      <boxGeometry args={[0.7, 0.7, 0.7]}>\r\n        <instancedBufferAttribute attachObject={['attributes', 'color']} args={[colorArray, 3]} />\r\n      </boxGeometry>\r\n      <meshPhongMaterial vertexColors={THREE.VertexColors} />\r\n    </instancedMesh>\r\n  )\r\n}","import * as THREE from 'three'\r\nimport React from 'react'\r\nimport { Canvas } from '@react-three/fiber'\r\nimport Effects from './effects/Chaos'\r\n\r\nimport Boxes from './components/Boxes'\r\n\r\nimport './styles.css'\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <Canvas\r\n      flat\r\n      gl={{ antialias: false, alpha: false }}\r\n      camera={{ position: [0, 0, 15], near: 5, far: 20 }}\r\n      onCreated={({ gl }) => gl.setClearColor('#f0f0f0')}>\r\n      <ambientLight />\r\n      <pointLight position={[150, 150, 150]} intensity={0.55} />\r\n      <Boxes />\r\n      <Effects />\r\n    </Canvas>\r\n  )\r\n}\r\n\r\n\r\n","import ReactDOM from 'react-dom'\nimport './styles.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}